{"version":3,"sources":["forms.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"unicef.js","sourcesContent":["//Mandatory fields\n\n/**\n * Polyfill. \n * IE and Edge do not support NodeList.forEach\n * This fixes it.\n */\nif (window.NodeList && !NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = Array.prototype.forEach;\n}\n\n\n/**\n * Set background color for input, selects and textareas.\n *\n * Requires two color CSS variables to be defined\n * --empty-required-field-background\n * --filled-required-field-background\n *\n * https://developer.mozilla.org/en-US/docs/Web/CSS/var\n *\n * In UNICEF theme colors are defined in variables.scss\n *\n *\n * If the field is empty sets the empty\n */\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  function setRequiredFieldBackgroundColor(field) {\n    //console.log(getComputedStyle(document.body).getPropertyValue('--empty-required-field-background'));\n    color = getComputedStyle(document.body).getPropertyValue('--filled-required-field-background');\n    if (field.value == \"\") {\n      color = getComputedStyle(document.body).getPropertyValue('--empty-required-field-background');\n    }\n    field.style.backgroundColor = color;\n  }\n  document.querySelectorAll('[required]').forEach(field => {\n    //initialize color.\n    setRequiredFieldBackgroundColor(field);\n    //Add event listener\n    field.addEventListener('change', (event) => {\n      //console.log(e)\n      setRequiredFieldBackgroundColor(event.target)\n      //console.log(e.target.style.backgroundColor)\n    });\n  });\n}, false);\n\n/**\n  * Textarea autoresize\n  *\n  * Textareas with data-autoresize attribute defined growth in height when\n  * user enters text.\n  *\n**/\ndocument.querySelectorAll('textarea[data-autoresize]').forEach(textarea => {\n  textarea.setAttribute('style', 'height:' + (textarea.scrollHeight) + 'px;overflow-y:hidden;');\n  textarea.addEventListener(\"input\", (event) => {\n    event.target.style.height = 'auto';\n    event.target.style.height = (event.target.scrollHeight) + 'px';\n  }, false);\n});\n\n/**\n * Textarea counter\n */\nHTMLTextAreaElement.prototype.counter = function () {\n  return this.maxLength - this.value.length;\n}\n\ndocument.querySelectorAll('textarea[data-counter]').forEach(textarea => {\n  if (textarea.id == \"\") {\n    throw \"In order to use data-counter on a textarea you need to set a unique id to the textarea\";\n  }\n  let counterId = textarea.id + \"-counter\";\n  //if counter is not in the HTML => add it to the DOM.\n  if (!document.getElementById(counterId)) {\n    let counter = document.createElement(\"small\")\n    counter.innerHTML = textarea.counter() + \" characters left\";\n    counter.id = counterId;\n    textarea.parentNode.insertBefore(counter, textarea.nextSibling);\n  }\n  textarea.addEventListener(\"input\", (event) => {\n    document.getElementById(counterId).innerHTML = event.target.counter() + \" characters left\";\n  }, false);\n});\n\n/**\n *  Navtabs menu\n */\nfunction myFunction() {\n  var x = document.getElementById(\"myTopnav\");\n  if (x.className === \"topnav\") {\n    x.className += \" responsive\";\n  } else {\n    x.className = \"topnav\";\n  }\n}"]}